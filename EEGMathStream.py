#!/usr/bin/env python
# coding: utf-8

# In[ ]:


pip install streamlit


# In[ ]:


streamlit run simple_app.py


# In[ ]:


pip install numpy pandas matplotlib pyedflib pywavelets scipy


# In[ ]:


streamlit run app.py


# In[ ]:


# app.py - –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –≠–≠–ì

import streamlit as st
import io
import base64

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫
def check_dependencies():
    missing_deps = []
    
    try:
        import numpy as np
    except ImportError:
        missing_deps.append("numpy")
    
    try:
        import pandas as pd
    except ImportError:
        missing_deps.append("pandas")
    
    try:
        import matplotlib
        matplotlib.use('Agg')
        import matplotlib.pyplot as plt
    except ImportError:
        missing_deps.append("matplotlib")
    
    try:
        import pyedflib
    except ImportError:
        missing_deps.append("pyedflib")
    
    try:
        import pywt
    except ImportError:
        missing_deps.append("pywavelets")
    
    try:
        from scipy.signal import butter, filtfilt
    except ImportError:
        missing_deps.append("scipy")
    
    return missing_deps

def main():
    st.set_page_config(
        page_title="–ü–æ–∏—Å–∫ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π –±—ã—Å—Ç—Ä–æ–≤–æ–ª–Ω–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
        page_icon="üß†",
        layout="wide"
    )
    
    st.title("üß† –ü–æ–∏—Å–∫ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π –±—ã—Å—Ç—Ä–æ–≤–æ–ª–Ω–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    missing_deps = check_dependencies()
    
    if missing_deps:
        st.error("‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏!")
        st.markdown(f"""
        ### –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:
        ```bash
        pip install {" ".join(missing_deps)}
        ```
        
        ### –ò–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Å—Ä–∞–∑—É:
        ```bash
        pip install streamlit numpy pandas matplotlib pyedflib pywavelets scipy
        ```
        """)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–º–æ-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–∞–∂–µ –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        show_demo_interface()
        return
    
    # –ï—Å–ª–∏ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é
    run_full_app()

def show_demo_interface():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ–º–æ-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–≥–¥–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"""
    st.warning("–ó–∞–≥—Ä—É–∑–∏—Ç–µ EDF —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ –±–µ–∑ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)")
    
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ EDF —Ñ–∞–π–ª", type=['edf'])
    
    if uploaded_file is not None:
        st.success(f"–§–∞–π–ª {uploaded_file.name} –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        st.info("–î–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤—ã—à–µ.")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        file_details = {
            "–ò–º—è —Ñ–∞–π–ª–∞": uploaded_file.name,
            "–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞": f"{uploaded_file.size / 1024:.2f} KB",
            "–¢–∏–ø —Ñ–∞–π–ª–∞": uploaded_file.type
        }
        st.json(file_details)
    else:
        st.info("""
        ### –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ:
        
        1. **–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏** –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—ã –≤—ã—à–µ
        2. **–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ**: 
           - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (Ctrl+C)
           - –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞: `streamlit run app.py`
        3. **–ó–∞–≥—Ä—É–∑–∏—Ç–µ EDF —Ñ–∞–π–ª** –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        
        ### –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:
        - –î–µ—Ç–µ–∫—Ü–∏—è —Ä–∏—Ç–º–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –≠–≠–ì
        - –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º
        - –ê–Ω–∞–ª–∏–∑ –ø–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –∫–∞–Ω–∞–ª–∞–º
        - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤
        """)

def run_full_app():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∫–æ–≥–¥–∞ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"""
    import numpy as np
    import pandas as pd
    import matplotlib.pyplot as plt
    from matplotlib.colors import LinearSegmentedColormap
    import pyedflib
    import pywt
    from scipy.signal import butter, filtfilt, hilbert
    import os
    from datetime import datetime
    
    class SimpleEEGAnalyzer:
        def __init__(self, file_buffer):
            self.file_buffer = file_buffer
            self.channel_names = []
            self.file_info = {}
            
        def load_file_info(self):
            """–ü—Ä–æ—Å—Ç–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –±–µ–∑ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
            try:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                with open("temp_edf_file.edf", "wb") as f:
                    f.write(self.file_buffer.getvalue())
                
                with pyedflib.EdfReader("temp_edf_file.edf") as edf:
                    self.channel_names = edf.getSignalLabels()
                    n_channels = edf.signals_in_file
                    
                    self.file_info = {
                        'file_name': os.path.basename("temp_edf_file.edf"),
                        'duration': edf.getFileDuration(),
                        'start_time': edf.getStartdatetime(),
                        'channels_count': n_channels,
                        'sample_frequency': int(edf.getSampleFrequency(0)) if n_channels > 0 else 0
                    }
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                if os.path.exists("temp_edf_file.edf"):
                    os.remove("temp_edf_file.edf")
                    
                return True
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
                return False
        
        def quick_analysis(self):
            """–ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
            st.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –±—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑...")
            
            # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
            fs = 250  #Hz
            t = np.linspace(0, 10, fs * 10)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ–º–æ-—Å–∏–≥–Ω–∞–ª —Å —Ä–∏—Ç–º–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
            signal = np.sin(2 * np.pi * 8 * t)  # –û—Å–Ω–æ–≤–Ω–æ–π —Ä–∏—Ç–º
            signal += 0.5 * np.sin(2 * np.pi * 25 * t)  # –í—ã—Å–æ–∫–æ—á–∞—Å—Ç–æ—Ç–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            signal += 0.3 * np.random.normal(size=len(t))  # –®—É–º
            
            # –î–µ—Ç–µ–∫—Ü–∏—è "–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏" - –ø—Ä–æ—Å—Ç–æ –¥–ª—è –¥–µ–º–æ
            rhythmic_regions = [(2, 3), (5, 6), (8, 9)]
            
            return signal, t, rhythmic_regions, fs
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    st.sidebar.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞")
    
    uploaded_file = st.sidebar.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ EDF —Ñ–∞–π–ª", type=['edf'])
    
    if uploaded_file is not None:
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞
        low_freq = st.sidebar.slider("–ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ —á–∞—Å—Ç–æ—Ç—ã (–ì—Ü)", 10, 30, 15)
        high_freq = st.sidebar.slider("–í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ —á–∞—Å—Ç–æ—Ç—ã (–ì—Ü)", 20, 50, 30)
        
        if st.sidebar.button("–í—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑", type="primary"):
            with st.spinner("–ê–Ω–∞–ª–∏–∑ –≠–≠–ì..."):
                try:
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
                    analyzer = SimpleEEGAnalyzer(uploaded_file)
                    
                    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ
                    if analyzer.load_file_info():
                        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                        st.header("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ")
                        col1, col2, col3, col4 = st.columns(4)
                        
                        with col1:
                            st.metric("–§–∞–π–ª", analyzer.file_info.get('file_name', 'N/A'))
                        with col2:
                            st.metric("–ö–∞–Ω–∞–ª—ã", analyzer.file_info.get('channels_count', 0))
                        with col3:
                            st.metric("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", f"{analyzer.file_info.get('duration', 0):.1f} —Å")
                        with col4:
                            st.metric("–ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä.", f"{analyzer.file_info.get('sample_frequency', 0)} –ì—Ü")
                        
                        # –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
                        st.subheader("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã")
                        st.write(f"–í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: {len(analyzer.channel_names)}")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –∫–∞–Ω–∞–ª–æ–≤
                        channels_to_show = analyzer.channel_names[:10]
                        for i, channel in enumerate(channels_to_show):
                            st.write(f"{i+1}. {channel}")
                        
                        if len(analyzer.channel_names) > 10:
                            st.info(f"... –∏ –µ—â–µ {len(analyzer.channel_names) - 10} –∫–∞–Ω–∞–ª–æ–≤")
                        
                        # –î–µ–º–æ-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
                        st.header("üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞")
                        
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
                        signal, times, regions, fs = analyzer.quick_analysis()
                        
                        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞
                        fig, ax = plt.subplots(figsize=(12, 4))
                        ax.plot(times, signal, 'b-', alpha=0.7, label='–≠–≠–ì —Å–∏–≥–Ω–∞–ª')
                        
                        # –í—ã–¥–µ–ª—è–µ–º "–æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ" –æ–±–ª–∞—Å—Ç–∏
                        for start, end in regions:
                            ax.axvspan(start, end, alpha=0.3, color='red', label='–†–∏—Ç–º–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å')
                        
                        ax.set_title('–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ä–∏—Ç–º–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏')
                        ax.set_xlabel('–í—Ä–µ–º—è (—Å)')
                        ax.set_ylabel('–ê–º–ø–ª–∏—Ç—É–¥–∞')
                        ax.grid(True, alpha=0.3)
                        ax.legend()
                        
                        st.pyplot(fig)
                        
                        # –î–µ–º–æ-—Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º–∞
                        st.subheader("üåà –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º—ã")
                        
                        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º—É
                        fig, ax = plt.subplots(figsize=(12, 4))
                        
                        # –í—ã—á–∏—Å–ª—è–µ–º —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º—É
                        f, t, Sxx = plt.specgram(signal, Fs=fs, cmap='jet')
                        
                        ax.set_title('–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º–∞')
                        ax.set_xlabel('–í—Ä–µ–º—è (—Å)')
                        ax.set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞ (–ì—Ü)')
                        plt.colorbar(plt.cm.ScalarMappable(cmap='jet'), ax=ax, label='–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å')
                        
                        st.pyplot(fig)
                        
                        # –î–µ–º–æ-–æ—Ç—á–µ—Ç
                        st.header("üìà –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç")
                        
                        report_data = []
                        for i, channel in enumerate(analyzer.channel_names[:5]):  # –ü–µ—Ä–≤—ã–µ 5 –∫–∞–Ω–∞–ª–æ–≤
                            report_data.append({
                                '–ö–∞–Ω–∞–ª': channel,
                                '–ò–Ω—Ç–µ—Ä–≤–∞–ª—ã': np.random.randint(1, 10),
                                '–û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Å)': f"{np.random.uniform(1, 5):.2f}",
                                '–°—Ä. –∞–º–ø–ª–∏—Ç—É–¥–∞ (–º–∫–í)': f"{np.random.uniform(0.01, 0.1):.4f}"
                            })
                        
                        st.dataframe(report_data)
                        
                        st.success("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                        
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}")
    
    else:
        st.info("""
        ### üß† –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≠–≠–ì - –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è
        
        **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
        - –î–µ—Ç–µ–∫—Ü–∏—è —Ä–∏—Ç–º–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –≠–≠–ì –∑–∞–ø–∏—Å—è—Ö
        - –ê–Ω–∞–ª–∏–∑ –ø–æ –≤—Å–µ–º –∫–∞–Ω–∞–ª–∞–º EDF —Ñ–∞–π–ª–∞
        - –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
        - –°–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è —á–∞—Å—Ç–æ—Ç–Ω–æ-–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
        
        **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**
        1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ EDF —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å
        2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞
        3. –ù–∞–∂–º–∏—Ç–µ "–í—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑"
        
        **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:** EDF (European Data Format)
        """)

if __name__ == "__main__":
    main()

