import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
import pyedflib
import pywt
from scipy.signal import butter, filtfilt, hilbert, periodogram, find_peaks
import pandas as pd
from datetime import datetime
import os
import io
import base64
from matplotlib.colors import LinearSegmentedColormap

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ü–æ–∏—Å–∫ —Ä–∏—Ç–º–∏—á–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
    #page_icon="üß†",
    layout="wide",
    initial_sidebar_state="expanded"
)

class EEGRhythmicActivityDetector:
    def __init__(self, edf_path=None, file_buffer=None):
        self.edf_path = edf_path
        self.file_buffer = file_buffer
        self.signal_data = None
        self.signal_fs = None
        self.channel_names = None
        self.detected_intervals = []
        self.all_channel_results = {}
        self.file_info = {}
        
    def load_edf_data(self, load_all_channels=True, verbose=False):
        try:
            if self.file_buffer:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏–∑ buffer
                with open("temp_edf_file.edf", "wb") as f:
                    f.write(self.file_buffer.getvalue())
                edf_path = "temp_edf_file.edf"
            else:
                edf_path = self.edf_path
                
            with pyedflib.EdfReader(edf_path) as edf:
                self.channel_names = edf.getSignalLabels()
                n_channels = edf.signals_in_file
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
                self.file_info = {
                    'file_name': os.path.basename(edf_path),
                    'duration': edf.getFileDuration(),
                    'start_time': edf.getStartdatetime(),
                    'channels_count': n_channels
                }
                
                if load_all_channels:
                    # –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤
                    self.multi_channel_data = []
                    for i in range(n_channels):
                        fs = int(edf.getSampleFrequency(i))
                        data = edf.readSignal(i)
                        self.multi_channel_data.append({
                            'name': self.channel_names[i],
                            'data': data,
                            'fs': fs
                        })
                    self.signal_fs = self.multi_channel_data[0]['fs']
                    self.signal_data = self.multi_channel_data[0]['data']
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ—Å–∏
                if hasattr(self, 'signal_data'):
                    self.times = np.arange(len(self.signal_data)) / self.signal_fs
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ buffer
                if self.file_buffer and os.path.exists("temp_edf_file.edf"):
                    os.remove("temp_edf_file.edf")
                    
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ EDF —Ñ–∞–π–ª–∞: {e}")
            raise
    
    def preprocess_signal(self, signal, fs, low_freq=1, high_freq=40, notch_freq=50):
        # –ü–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∏–ª—å—Ç—Ä –ë–∞—Ç—Ç–µ—Ä–≤–æ—Ä—Ç–∞
        nyquist = fs / 2
        low = low_freq / nyquist
        high = high_freq / nyquist
        
        if low >= 1 or high >= 1:
            st.warning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —á–∞—Å—Ç–æ—Ç–∞ —Å—Ä–µ–∑–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ù–∞–π–∫–≤–∏—Å—Ç–∞!")
            return signal.copy()
        
        b, a = butter(4, [low, high], btype='band')
        filtered_signal = filtfilt(b, a, signal)
        
        return filtered_signal
    
    def find_rhythmic_patterns(self, filtered_signal, fs, target_freq=25, 
                              min_waves=6, max_freq_variation=0.4, max_amp_variation=0.7):
        """
        –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ —Ä–∏—Ç–º–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        —Å —É—á–µ—Ç–æ–º –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –≤–∞—Ä–∏–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–æ–ª–Ω
        """
        try:
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–∏–≥–Ω–∞–ª –¥–ª—è –ª—É—á—à–µ–≥–æ –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            signal_normalized = filtered_signal / (np.max(np.abs(filtered_signal)) + 1e-8)
            
            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø–∏–∫–∏ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ)
            positive_peaks, _ = find_peaks(signal_normalized, 
                                         height=0.2, 
                                         distance=int(fs/target_freq*0.6))
            negative_peaks, _ = find_peaks(-signal_normalized, 
                                         height=0.2, 
                                         distance=int(fs/target_freq*0.6))
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —ç–∫—Å—Ç—Ä–µ–º—É–º—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
            all_extremas = np.sort(np.concatenate([positive_peaks, negative_peaks]))
            
            if len(all_extremas) < min_waves + 1:
                return []
            
            rhythmic_segments = []
            current_segment = [all_extremas[0]]
            
            for i in range(1, len(all_extremas)):
                current_gap = all_extremas[i] - all_extremas[i-1]
                expected_gap = fs / target_freq
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–∂–∏–¥–∞–µ–º–æ–π —á–∞—Å—Ç–æ—Ç–µ
                gap_ratio = current_gap / expected_gap
                
                if 0.5 <= gap_ratio <= 2.0:  # –ë–æ–ª–µ–µ —à–∏—Ä–æ–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω
                    current_segment.append(all_extremas[i])
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç
                    if len(current_segment) >= min_waves:
                        start_idx = current_segment[0]
                        end_idx = current_segment[-1]
                        
                        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ–≥–º–µ–Ω—Ç –Ω–∞ —Ä–∏—Ç–º–∏—á–Ω–æ—Å—Ç—å
                        segment_data = filtered_signal[start_idx:end_idx]
                        if self.analyze_segment_rhythmicity(segment_data, fs, target_freq,
                                                          max_freq_variation, max_amp_variation):
                            start_time = start_idx / fs
                            end_time = end_idx / fs
                            duration = end_time - start_time
                            n_waves = len(current_segment) - 1
                            
                            rhythmic_segments.append((start_time, end_time, duration, n_waves))
                    
                    current_segment = [all_extremas[i]]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–µ–≥–º–µ–Ω—Ç
            if len(current_segment) >= min_waves:
                start_idx = current_segment[0]
                end_idx = current_segment[-1]
                segment_data = filtered_signal[start_idx:end_idx]
                if self.analyze_segment_rhythmicity(segment_data, fs, target_freq,
                                                  max_freq_variation, max_amp_variation):
                    start_time = start_idx / fs
                    end_time = end_idx / fs
                    duration = end_time - start_time
                    n_waves = len(current_segment) - 1
                    rhythmic_segments.append((start_time, end_time, duration, n_waves))
            
            return rhythmic_segments
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –≤ –ø–æ–∏—Å–∫–µ —Ä–∏—Ç–º–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {e}")
            return []
    
    def analyze_segment_rhythmicity(self, segment, fs, target_freq, 
                                  max_freq_variation, max_amp_variation):
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ–≥–º–µ–Ω—Ç –Ω–∞ —Ä–∏—Ç–º–∏—á–Ω–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º –≤–∞—Ä–∏–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
        """
        if len(segment) < 10:
            return False
        
        try:
            # –ù–∞—Ö–æ–¥–∏–º —ç–∫—Å—Ç—Ä–µ–º—É–º—ã –≤ —Å–µ–≥–º–µ–Ω—Ç–µ
            peaks, _ = find_peaks(np.abs(segment), height=0.1, distance=int(fs/target_freq*0.3))
            
            if len(peaks) < 4:  # –ú–∏–Ω–∏–º—É–º 4 —ç–∫—Å—Ç—Ä–µ–º—É–º–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                return False
            
            # –ê–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –º–µ–∂–¥—É —ç–∫—Å—Ç—Ä–µ–º—É–º–∞–º–∏
            intervals = np.diff(peaks) / fs
            frequencies = 1.0 / intervals
            
            # –ê–Ω–∞–ª–∏–∑ –∞–º–ø–ª–∏—Ç—É–¥
            amplitudes = np.abs(segment[peaks])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—Ä–∏–∞–±–µ–ª—å–Ω–æ—Å—Ç—å (–±–æ–ª–µ–µ –º—è–≥–∫–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏)
            if len(frequencies) > 1:
                freq_variation = np.std(frequencies) / np.mean(frequencies)
                amp_variation = np.std(amplitudes) / (np.mean(amplitudes) + 1e-8)
                
                # –ú—è–≥–∫–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –≤–∞—Ä–∏–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
                freq_ok = freq_variation <= max_freq_variation
                amp_ok = amp_variation <= max_amp_variation
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Å—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ü–µ–ª–µ–≤–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
                mean_freq = np.mean(frequencies)
                freq_in_range = (target_freq * 0.6 <= mean_freq <= target_freq * 1.4)
                
                return freq_ok and amp_ok and freq_in_range
            
            return False
            
        except:
            return False
    
    def detect_rhythmic_bursts(self, filtered_signal, fs, low_freq=1, high_freq=40, 
                              threshold_percentile=85, min_duration=0.1, max_duration=2.0,
                              min_waves=6, max_freq_variation=0.4, max_amp_variation=0.7):
        try:
            # –¶–µ–ª–µ–≤–∞—è —á–∞—Å—Ç–æ—Ç–∞ –¥–ª—è —Ä–∏—Ç–º–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            target_freq = (low_freq + high_freq) / 2
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ —Ä–∏—Ç–º–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            rhythmic_segments = self.find_rhythmic_patterns(
                filtered_signal, fs, target_freq, min_waves, 
                max_freq_variation, max_amp_variation
            )
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –≤–µ–π–≤–ª–µ—Ç-–∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            intervals = []
            for start_time, end_time, duration, n_waves in rhythmic_segments:
                if min_duration <= duration <= max_duration:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–Ω–µ—Ä–≥–∏—é –≤ —Ü–µ–ª–µ–≤–æ–º —á–∞—Å—Ç–æ—Ç–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
                    start_idx = int(start_time * fs)
                    end_idx = int(end_time * fs)
                    segment = filtered_signal[start_idx:end_idx]
                    
                    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —ç–Ω–µ—Ä–≥–∏–∏
                    segment_energy = np.mean(segment**2)
                    if segment_energy > np.percentile(filtered_signal**2, 30):
                        intervals.append((start_time, end_time, duration, n_waves))
            
            # –î–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
            frequencies = np.linspace(high_freq, low_freq, 50)
            scales = pywt.frequency2scale('cmor1.5-1.0', frequencies) * fs
            coefficients, freqs = pywt.cwt(filtered_signal, scales, 'cmor1.5-1.0', 
                                         sampling_period=1/fs)
            energy = np.abs(coefficients) ** 2
            mean_energy = np.mean(energy, axis=0)
            
            return intervals, mean_energy, coefficients, frequencies
        
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –≤ –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            return [], np.zeros_like(filtered_signal), np.array([]), np.array([])
    
    def analyze_all_channels(self, low_freq=1, high_freq=40, channels_to_analyze=None,
                           min_waves=6, max_freq_variation=0.4, max_amp_variation=0.7):
        if not hasattr(self, 'multi_channel_data'):
            self.load_edf_data(load_all_channels=True)
        
        if channels_to_analyze is None:
            channels_to_analyze = list(range(len(self.multi_channel_data)))
        
        self.low_freq = low_freq
        self.high_freq = high_freq
        self.all_channel_results = {}
        
        active_channels = []
        
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        for idx, channel_idx in enumerate(channels_to_analyze):
            channel_data = self.multi_channel_data[channel_idx]
            channel_name = channel_data['name']
            signal = channel_data['data']
            fs = channel_data['fs']
            
            status_text.text(f"–ê–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞: {channel_name} ({idx+1}/{len(channels_to_analyze)})")
            
            # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞
            filtered_signal = self.preprocess_signal(signal, fs, low_freq, high_freq)
            
            # –î–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–ø–ª–µ—Å–∫–æ–≤
            intervals, energy, coefficients, frequencies = self.detect_rhythmic_bursts(
                filtered_signal, fs, low_freq, high_freq,
                min_waves=min_waves,
                max_freq_variation=max_freq_variation,
                max_amp_variation=max_amp_variation
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self.all_channel_results[channel_name] = {
                'intervals': intervals,
                'filtered_signal': filtered_signal,
                'energy': energy,
                'coefficients': coefficients,
                'frequencies': frequencies,
                'signal': signal,
                'fs': fs,
                'intervals_count': len(intervals),
                'total_duration': sum(duration for duration, _, _, _ in intervals)
            }
            
            if intervals:
                active_channels.append(channel_name)
            
            progress_bar.progress((idx + 1) / len(channels_to_analyze))
        
        status_text.text("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        return active_channels

def main():
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    st.title("–ü–æ–∏—Å–∫ —Ä–∏—Ç–º–∏—á–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    st.markdown("""
    –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ —Å —Ä–∏—Ç–º–∏—á–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é 
    –≤ –∑–∞–ø–∏—Å—è—Ö –≠–≠–ì —Ñ–æ—Ä–º–∞—Ç–∞ EDF.
    """)
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    st.sidebar.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
    uploaded_file = st.sidebar.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ EDF —Ñ–∞–π–ª", type=['edf'])
    
    if uploaded_file is not None:
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞
        low_freq = st.sidebar.slider("–ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ —á–∞—Å—Ç–æ—Ç—ã (–ì—Ü)", 1, 30, 15)
        high_freq = st.sidebar.slider("–í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ —á–∞—Å—Ç–æ—Ç—ã (–ì—Ü)", 20, 100, 30)
        top_channels = st.sidebar.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–ø-–∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", 1, 20, 10)
        threshold = st.sidebar.slider("–ü–æ—Ä–æ–≥ —ç–Ω–µ—Ä–≥–∏–∏ (%)", 30, 95, 50)
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∏—Ç–º–∏—á–Ω–æ—Å—Ç–∏
        with st.sidebar.expander("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∏—Ç–º–∏—á–Ω–æ—Å—Ç–∏"):
            min_waves = st.slider("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ª–Ω", 4, 10, 6)
            max_freq_variation = st.slider("–ú–∞–∫—Å. –≤–∞—Ä–∏–∞—Ü–∏—è —á–∞—Å—Ç–æ—Ç—ã", 0.2, 1.0, 0.5, 0.05,
                                         help="–î–æ–ø—É—Å—Ç–∏–º–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –º–µ–∂–¥—É –≤–æ–ª–Ω–∞–º–∏")
            max_amp_variation = st.slider("–ú–∞–∫—Å. –≤–∞—Ä–∏–∞—Ü–∏—è –∞–º–ø–ª–∏—Ç—É–¥—ã", 0.3, 1.2, 0.8, 0.05,
                                        help="–î–æ–ø—É—Å—Ç–∏–º–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∞–º–ø–ª–∏—Ç—É–¥—ã –º–µ–∂–¥—É –≤–æ–ª–Ω–∞–º–∏")
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
        if st.sidebar.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", type="primary"):
            with st.spinner("–ê–Ω–∞–ª–∏–∑ –≠–≠–ì –∑–∞–ø–∏—Å–∏..."):
                try:
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
                    detector = EEGRhythmicActivityDetector(file_buffer=uploaded_file)
                    
                    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
                    active_channels = detector.analyze_all_channels(
                        low_freq=low_freq, 
                        high_freq=high_freq,
                        min_waves=min_waves,
                        max_freq_variation=max_freq_variation,
                        max_amp_variation=max_amp_variation
                    )
                    
                    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
                    st.header("üìä –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
                    col1, col2, col3, col4 = st.columns(4)
                    
                    with col1:
                        st.metric("–§–∞–π–ª", detector.file_info.get('file_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))
                    with col2:
                        st.metric("–ö–∞–Ω–∞–ª–æ–≤", detector.file_info.get('channels_count', 0))
                    with col3:
                        st.metric("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", f"{detector.file_info.get('duration', 0):.1f} —Å")
                    with col4:
                        st.metric("–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤", len(active_channels))
                    
                    # –û—Ç—á–µ—Ç –ø–æ –∫–∞–Ω–∞–ª–∞–º
                    st.header("üìà –û—Ç—á–µ—Ç –ø–æ –∫–∞–Ω–∞–ª–∞–º —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é")
                    
                    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
                    report_data = []
                    for channel_name, results in detector.all_channel_results.items():
                        if results['intervals']:
                            total_waves = sum(waves for _, _, _, waves in results['intervals'])
                            
                            report_data.append({
                                '–ö–∞–Ω–∞–ª': channel_name,
                                '–ò–Ω—Ç–µ—Ä–≤–∞–ª—ã': results['intervals_count'],
                                '–í—Å–µ–≥–æ –≤–æ–ª–Ω': total_waves,
                                '–û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Å)': f"{results['total_duration']:.2f}",
                                '–°—Ä. –≤–æ–ª–Ω/–∏–Ω—Ç–µ—Ä–≤–∞–ª': f"{total_waves/results['intervals_count']:.1f}"
                            })
                    
                    if report_data:
                        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
                        report_data.sort(key=lambda x: x['–ò–Ω—Ç–µ—Ä–≤–∞–ª—ã'], reverse=True)
                        top_report_data = report_data[:top_channels]
                        
                        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
                        st.dataframe(top_report_data, width='stretch')
                        
                        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–ø-–∫–∞–Ω–∞–ª–æ–≤
                        st.header("üéØ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–ø-–∫–∞–Ω–∞–ª–æ–≤")
                        
                        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
                        channels_to_visualize = [item['–ö–∞–Ω–∞–ª'] for item in top_report_data[:6]]
                        
                        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
                        tab1, tab2, tab3 = st.tabs(["üìä –°–∏–≥–Ω–∞–ª—ã —Å –¥–µ—Ç–µ–∫—Ü–∏–µ–π", "üåà –°–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º—ã", "üìã –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"])
                        
                        with tab1:
                            st.subheader("–°–∏–≥–Ω–∞–ª—ã —Å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
                            for channel_name in channels_to_visualize:
                                results = detector.all_channel_results[channel_name]
                                fig, ax = plt.subplots(figsize=(12, 3))
                                
                                times = np.arange(len(results['signal'])) / results['fs']
                                ax.plot(times, results['filtered_signal'], 'b-', alpha=0.7, 
                                       label='–§–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π –≠–≠–ì', linewidth=0.8)
                                
                                # –í—ã–¥–µ–ª–µ–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
                                for start, end, duration, waves in results['intervals']:
                                    ax.axvspan(start, end, alpha=0.3, color='red')
                                    # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ª–Ω
                                    ax.text((start + end) / 2, ax.get_ylim()[1] * 0.9, 
                                           f'{waves} –≤–æ–ª–Ω', ha='center', va='top', 
                                           fontsize=8, bbox=dict(boxstyle="round,pad=0.3", 
                                                               facecolor="yellow", alpha=0.7))
                                
                                ax.set_title(f'–ö–∞–Ω–∞–ª: {channel_name} - {results["intervals_count"]} –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤')
                                ax.set_xlabel('–í—Ä–µ–º—è (—Å)')
                                ax.set_ylabel('–ê–º–ø–ª–∏—Ç—É–¥–∞ (–º–∫–í)')
                                ax.grid(True, alpha=0.3)
                                ax.legend()
                                
                                st.pyplot(fig)
                                plt.close()
                        
                        with tab2:
                            st.subheader("–°–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º—ã –∫–∞–Ω–∞–ª–æ–≤ —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é")
                            
                            colors = ['#0000FF', '#00FFFF', '#00FF00', '#FFFF00', '#FF0000']
                            cmap = LinearSegmentedColormap.from_list('custom_jet', colors, N=256)
                            
                            for channel_name in channels_to_visualize:
                                results = detector.all_channel_results[channel_name]
                                fig, ax = plt.subplots(figsize=(12, 4))
                                
                                times = np.arange(len(results['signal'])) / results['fs']
                                extent = [times[0], times[-1], low_freq, high_freq]
                                
                                im = ax.imshow(np.abs(results['coefficients']), 
                                             extent=extent, aspect='auto', 
                                             origin='lower', cmap=cmap)
                                
                                # –û—Ç–º–µ—á–∞–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –Ω–∞ —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º–µ
                                for start, end, duration, waves in results['intervals']:
                                    ax.axvline(x=start, color='white', linestyle='--', alpha=0.7, linewidth=1)
                                    ax.axvline(x=end, color='white', linestyle='--', alpha=0.7, linewidth=1)
                                    ax.axvspan(start, end, alpha=0.2, color='white')
                                    ax.text((start + end) / 2, high_freq * 0.9, 
                                           f'{waves}', ha='center', va='top', 
                                           color='white', fontweight='bold')
                                
                                ax.set_title(f'–°–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º–∞ - –ö–∞–Ω–∞–ª: {channel_name}')
                                ax.set_xlabel('–í—Ä–µ–º—è (—Å)')
                                ax.set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞ (–ì—Ü)')
                                plt.colorbar(im, ax=ax, label='–ê–º–ø–ª–∏—Ç—É–¥–∞')
                                
                                st.pyplot(fig)
                                plt.close()
                        
                        with tab3:
                            st.subheader("–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º")
                            
                            for channel_name in channels_to_visualize:
                                results = detector.all_channel_results[channel_name]
                                
                                with st.expander(f"–ö–∞–Ω–∞–ª: {channel_name} ({results['intervals_count']} –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤)"):
                                    intervals_df = pd.DataFrame([
                                        {
                                            '–ù–∞—á–∞–ª–æ (—Å)': f"{start:.2f}",
                                            '–ö–æ–Ω–µ—Ü (—Å)': f"{end:.2f}", 
                                            '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Å)': f"{duration:.2f}",
                                            '–ö–æ–ª-–≤–æ –≤–æ–ª–Ω': waves,
                                            '–°—Ä. —á–∞—Å—Ç–æ—Ç–∞ (–ì—Ü)': f"{(waves-1)/duration:.1f}"
                                        }
                                        for start, end, duration, waves in results['intervals']
                                    ])
                                    st.dataframe(intervals_df, width='stretch')
                    
                    else:
                        st.warning("–†–∏—Ç–º–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö.")
                        st.info("""
                        **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
                        - –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Å–ª–∞–±–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ —Ä–∏—Ç–º–∏—á–Ω–æ—Å—Ç–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
                        - –£–≤–µ–ª–∏—á—å—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≤–∞—Ä–∏–∞—Ü–∏—é —á–∞—Å—Ç–æ—Ç—ã –∏ –∞–º–ø–ª–∏—Ç—É–¥—ã
                        - –£–º–µ–Ω—å—à–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ª–Ω
                        - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥—Ä—É–≥–æ–π —á–∞—Å—Ç–æ—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
                        """)
                        
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}")
    
    else:
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        st.info("""
        ### –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:
        
        1. **–ó–∞–≥—Ä—É–∑–∏—Ç–µ EDF —Ñ–∞–π–ª** —Å –∑–∞–ø–∏—Å—å—é –≠–≠–ì —á–µ—Ä–µ–∑ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å
        2. **–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞**:
           - –ß–∞—Å—Ç–æ—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 15-30 –ì—Ü)
           - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–ø-–∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
           - –ü–æ—Ä–æ–≥ —ç–Ω–µ—Ä–≥–∏–∏
        3. **–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ —Ä–∏—Ç–º–∏—á–Ω–æ—Å—Ç–∏** (–≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö):
           - –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ª–Ω (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 4-6)
           - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤–∞—Ä–∏–∞—Ü–∏—è —á–∞—Å—Ç–æ—Ç—ã (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 0.4-0.8)
           - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤–∞—Ä–∏–∞—Ü–∏—è –∞–º–ø–ª–∏—Ç—É–¥—ã (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 0.6-1.0)
        4. **–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑"**
        
        ### –£–ª—É—á—à–µ–Ω–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ —Ä–∏—Ç–º–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:
        - **4-6+ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ª–Ω** —Å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –≤–∞—Ä–∏–∞–±–µ–ª—å–Ω–æ—Å—Ç—å—é
        - **–°—Ç–∞–±–∏–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞** (–≤–∞—Ä–∏–∞—Ü–∏—è 40-80% –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è)
        - **–°—Ç–∞–±–∏–ª—å–Ω–∞—è –∞–º–ø–ª–∏—Ç—É–¥–∞** (–≤–∞—Ä–∏–∞—Ü–∏—è 60-100% –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è)
        - **–£—á–µ—Ç –∫–∞–∫ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö, —Ç–∞–∫ –∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∏–∫–æ–≤**
        - **–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä–æ–≥–∏** –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
        
        ### –í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
        - –¢–∞–±–ª–∏—Ü–∞ —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ –∫–∞–Ω–∞–ª–∞–º
        - –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
        - –°–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —á–∞—Å—Ç–æ—Ç–Ω–æ-–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        - –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º
        """)

if __name__ == "__main__":
    main()
