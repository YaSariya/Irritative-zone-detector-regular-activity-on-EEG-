import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
import pyedflib
import pywt
from scipy.signal import butter, filtfilt, hilbert, periodogram
import pandas as pd
from datetime import datetime
import os
import io
import base64
from matplotlib.colors import LinearSegmentedColormap

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–î–µ—Ç–µ–∫—Ü–∏—è —Ä–∏—Ç–º–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
    page_icon="üß†",
    layout="wide",
    initial_sidebar_state="expanded"
)

class EEGRhythmicActivityDetector:
    def __init__(self, edf_path=None, file_buffer=None):
        self.edf_path = edf_path
        self.file_buffer = file_buffer
        self.signal_data = None
        self.signal_fs = None
        self.channel_names = None
        self.detected_intervals = []
        self.all_channel_results = {}
        self.file_info = {}
        
    def load_edf_data(self, load_all_channels=True, verbose=False):
        try:
            if self.file_buffer:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏–∑ buffer
                with open("temp_edf_file.edf", "wb") as f:
                    f.write(self.file_buffer.getvalue())
                edf_path = "temp_edf_file.edf"
            else:
                edf_path = self.edf_path
                
            with pyedflib.EdfReader(edf_path) as edf:
                self.channel_names = edf.getSignalLabels()
                n_channels = edf.signals_in_file
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
                self.file_info = {
                    'file_name': os.path.basename(edf_path),
                    'duration': edf.getFileDuration(),
                    'start_time': edf.getStartdatetime(),
                    'channels_count': n_channels
                }
                
                if load_all_channels:
                    # –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤
                    self.multi_channel_data = []
                    for i in range(n_channels):
                        fs = int(edf.getSampleFrequency(i))
                        data = edf.readSignal(i)
                        self.multi_channel_data.append({
                            'name': self.channel_names[i],
                            'data': data,
                            'fs': fs
                        })
                    self.signal_fs = self.multi_channel_data[0]['fs']
                    self.signal_data = self.multi_channel_data[0]['data']
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ—Å–∏
                if hasattr(self, 'signal_data'):
                    self.times = np.arange(len(self.signal_data)) / self.signal_fs
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ buffer
                if self.file_buffer and os.path.exists("temp_edf_file.edf"):
                    os.remove("temp_edf_file.edf")
                    
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ EDF —Ñ–∞–π–ª–∞: {e}")
            raise
    
    def preprocess_signal(self, signal, fs, low_freq=1, high_freq=40, notch_freq=50):
        # –ü–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∏–ª—å—Ç—Ä –ë–∞—Ç—Ç–µ—Ä–≤–æ—Ä—Ç–∞
        nyquist = fs / 2
        low = low_freq / nyquist
        high = high_freq / nyquist
        
        if low >= 1 or high >= 1:
            st.warning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —á–∞—Å—Ç–æ—Ç–∞ —Å—Ä–µ–∑–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ù–∞–π–∫–≤–∏—Å—Ç–∞!")
            return signal.copy()
        
        b, a = butter(4, [low, high], btype='band')
        filtered_signal = filtfilt(b, a, signal)
        
        return filtered_signal
    
    def detect_rhythmic_bursts(self, filtered_signal, fs, low_freq=1, high_freq=40, 
                              threshold_percentile=85, min_duration=0.1, max_duration=2.0):
        try:
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–µ–π–≤–ª–µ—Ç-–∞–Ω–∞–ª–∏–∑–∞
            frequencies = np.linspace(high_freq, low_freq, 50)
            scales = pywt.frequency2scale('cmor1.5-1.0', frequencies) * fs
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –≤–µ–π–≤–ª–µ—Ç-–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
            coefficients, freqs = pywt.cwt(filtered_signal, scales, 'cmor1.5-1.0', 
                                         sampling_period=1/fs)
            
            # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ –≤–µ–π–≤–ª–µ—Ç-–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
            energy = np.abs(coefficients) ** 2
            mean_energy = np.mean(energy, axis=0)
            
            # –ü–æ—Ä–æ–≥–æ–≤–æ–µ –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            threshold = np.percentile(mean_energy, threshold_percentile)
            above_threshold = mean_energy > threshold
            
            # –ü–æ–∏—Å–∫ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            intervals = []
            start_idx = None
            
            for i, val in enumerate(above_threshold):
                if val and start_idx is None:
                    start_idx = i
                elif not val and start_idx is not None:
                    end_idx = i
                    duration = (end_idx - start_idx) / fs
                    
                    if min_duration <= duration <= max_duration:
                        start_time = start_idx / fs
                        end_time = end_idx / fs
                        intervals.append((start_time, end_time, duration))
                    
                    start_idx = None
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
            if start_idx is not None:
                end_idx = len(above_threshold)
                duration = (end_idx - start_idx) / fs
                if min_duration <= duration <= max_duration:
                    start_time = start_idx / fs
                    end_time = end_idx / fs
                    intervals.append((start_time, end_time, duration))
            
            return intervals, mean_energy, coefficients, frequencies
        
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –≤ –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            return [], np.zeros_like(filtered_signal), np.array([]), np.array([])
    
    def analyze_all_channels(self, low_freq=1, high_freq=40, channels_to_analyze=None):
        if not hasattr(self, 'multi_channel_data'):
            self.load_edf_data(load_all_channels=True)
        
        if channels_to_analyze is None:
            channels_to_analyze = list(range(len(self.multi_channel_data)))
        
        self.low_freq = low_freq
        self.high_freq = high_freq
        self.all_channel_results = {}
        
        active_channels = []
        
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        for idx, channel_idx in enumerate(channels_to_analyze):
            channel_data = self.multi_channel_data[channel_idx]
            channel_name = channel_data['name']
            signal = channel_data['data']
            fs = channel_data['fs']
            
            status_text.text(f"–ê–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞: {channel_name} ({idx+1}/{len(channels_to_analyze)})")
            
            # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞
            filtered_signal = self.preprocess_signal(signal, fs, low_freq, high_freq)
            
            # –î–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–ø–ª–µ—Å–∫–æ–≤
            intervals, energy, coefficients, frequencies = self.detect_rhythmic_bursts(
                filtered_signal, fs, low_freq, high_freq)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self.all_channel_results[channel_name] = {
                'intervals': intervals,
                'filtered_signal': filtered_signal,
                'energy': energy,
                'coefficients': coefficients,
                'frequencies': frequencies,
                'signal': signal,
                'fs': fs,
                'intervals_count': len(intervals),
                'total_duration': sum(duration for _, _, duration in intervals)
            }
            
            if intervals:
                active_channels.append(channel_name)
            
            progress_bar.progress((idx + 1) / len(channels_to_analyze))
        
        status_text.text("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        return active_channels

def plot_to_html(fig):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç matplotlib figure –≤ HTML –¥–ª—è Streamlit"""
    buf = io.BytesIO()
    fig.savefig(buf, format="png", dpi=150, bbox_inches='tight')
    buf.seek(0)
    img_str = base64.b64encode(buf.read()).decode()
    buf.close()
    return f'<img src="data:image/png;base64,{img_str}" style="max-width:100%;">'

def main():
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    st.title("üß† –î–µ—Ç–µ–∫—Ü–∏—è —Ä–∏—Ç–º–∏—á–µ—Å–∫–æ–π –±—ã—Å—Ç—Ä–æ–≤–æ–ª–Ω–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    st.markdown("""
    –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—á–∞—Å—Ç–∫–æ–≤ —Å —á–∞—Å—Ç–æ–π —Ä–∏—Ç–º–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é 
    (–æ—Å—Ç—Ä—ã–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤–æ–ª–Ω—ã) –≤ –∑–∞–ø–∏—Å—è—Ö –≠–≠–ì —Ñ–æ—Ä–º–∞—Ç–∞ EDF.
    """)
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    st.sidebar.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
    uploaded_file = st.sidebar.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ EDF —Ñ–∞–π–ª", type=['edf'])
    
    if uploaded_file is not None:
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞
        low_freq = st.sidebar.slider("–ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ —á–∞—Å—Ç–æ—Ç—ã (–ì—Ü)", 1, 30, 15)
        high_freq = st.sidebar.slider("–í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ —á–∞—Å—Ç–æ—Ç—ã (–ì—Ü)", 20, 100, 30)
        top_channels = st.sidebar.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–ø-–∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", 1, 20, 10)
        threshold = st.sidebar.slider("–ü–æ—Ä–æ–≥ –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (%)", 70, 95, 85)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
        if st.sidebar.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", type="primary"):
            with st.spinner("–ê–Ω–∞–ª–∏–∑ –≠–≠–ì –∑–∞–ø–∏—Å–∏..."):
                try:
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
                    detector = EEGRhythmicActivityDetector(file_buffer=uploaded_file)
                    
                    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
                    active_channels = detector.analyze_all_channels(
                        low_freq=low_freq, 
                        high_freq=high_freq
                    )
                    
                    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
                    st.header("üìä –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
                    col1, col2, col3, col4 = st.columns(4)
                    
                    with col1:
                        st.metric("–§–∞–π–ª", detector.file_info.get('file_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))
                    with col2:
                        st.metric("–ö–∞–Ω–∞–ª–æ–≤", detector.file_info.get('channels_count', 0))
                    with col3:
                        st.metric("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", f"{detector.file_info.get('duration', 0):.1f} —Å")
                    with col4:
                        st.metric("–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤", len(active_channels))
                    
                    # –û—Ç—á–µ—Ç –ø–æ –∫–∞–Ω–∞–ª–∞–º
                    st.header("üìà –û—Ç—á–µ—Ç –ø–æ –∫–∞–Ω–∞–ª–∞–º —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é")
                    
                    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
                    report_data = []
                    for channel_name, results in detector.all_channel_results.items():
                        if results['intervals']:
                            report_data.append({
                                '–ö–∞–Ω–∞–ª': channel_name,
                                '–ò–Ω—Ç–µ—Ä–≤–∞–ª—ã': results['intervals_count'],
                                '–û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Å)': f"{results['total_duration']:.2f}",
                                '–°—Ä. –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Å)': f"{results['total_duration']/results['intervals_count']:.2f}",
                                '–°—Ä. –∞–º–ø–ª–∏—Ç—É–¥–∞ (–º–∫–í)': f"{np.mean(np.abs(results['filtered_signal'])):.4f}",
                                '–ú–∞–∫—Å. –∞–º–ø–ª–∏—Ç—É–¥–∞ (–º–∫–í)': f"{np.max(np.abs(results['filtered_signal'])):.4f}"
                            })
                    
                    if report_data:
                        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
                        report_data.sort(key=lambda x: x['–ò–Ω—Ç–µ—Ä–≤–∞–ª—ã'], reverse=True)
                        top_report_data = report_data[:top_channels]
                        
                        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É - –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨
                        st.dataframe(top_report_data, width='stretch')
                        
                        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–ø-–∫–∞–Ω–∞–ª–æ–≤
                        st.header("üéØ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–ø-–∫–∞–Ω–∞–ª–æ–≤")
                        
                        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
                        channels_to_visualize = [item['–ö–∞–Ω–∞–ª'] for item in top_report_data[:6]]
                        
                        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
                        tab1, tab2, tab3 = st.tabs(["üìä –°–∏–≥–Ω–∞–ª—ã —Å –¥–µ—Ç–µ–∫—Ü–∏–µ–π", "üåà –°–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º—ã", "üìã –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"])
                        
                        with tab1:
                            st.subheader("–°–∏–≥–Ω–∞–ª—ã —Å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
                            for channel_name in channels_to_visualize:
                                results = detector.all_channel_results[channel_name]
                                fig, ax = plt.subplots(figsize=(12, 3))
                                
                                times = np.arange(len(results['signal'])) / results['fs']
                                ax.plot(times, results['signal'], 'b-', alpha=0.7, label='–ò—Å—Ö–æ–¥–Ω—ã–π –≠–≠–ì')
                                
                                # –í—ã–¥–µ–ª–µ–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
                                for start, end, duration in results['intervals']:
                                    ax.axvspan(start, end, alpha=0.3, color='red')
                                
                                ax.set_title(f'–ö–∞–Ω–∞–ª: {channel_name} - {results["intervals_count"]} –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤, {results["total_duration"]:.2f} —Å')
                                ax.set_xlabel('–í—Ä–µ–º—è (—Å)')
                                ax.set_ylabel('–ê–º–ø–ª–∏—Ç—É–¥–∞ (–º–∫–í)')
                                ax.grid(True, alpha=0.3)
                                ax.legend()
                                
                                st.pyplot(fig)
                                plt.close()
                        
                        with tab2:
                            st.subheader("–°–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º—ã –∫–∞–Ω–∞–ª–æ–≤ —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é")
                            
                            # –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é —Ü–≤–µ—Ç–æ–≤—É—é –∫–∞—Ä—Ç—É
                            colors = ['#0000FF', '#00FFFF', '#00FF00', '#FFFF00', '#FF0000']
                            cmap = LinearSegmentedColormap.from_list('custom_jet', colors, N=256)
                            
                            for channel_name in channels_to_visualize:
                                results = detector.all_channel_results[channel_name]
                                fig, ax = plt.subplots(figsize=(12, 4))
                                
                                times = np.arange(len(results['signal'])) / results['fs']
                                extent = [times[0], times[-1], low_freq, high_freq]
                                
                                im = ax.imshow(np.abs(results['coefficients']), 
                                             extent=extent, aspect='auto', 
                                             origin='lower', cmap=cmap)
                                
                                ax.set_title(f'–°–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º–∞ - –ö–∞–Ω–∞–ª: {channel_name}')
                                ax.set_xlabel('–í—Ä–µ–º—è (—Å)')
                                ax.set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞ (–ì—Ü)')
                                plt.colorbar(im, ax=ax, label='–ê–º–ø–ª–∏—Ç—É–¥–∞')
                                
                                st.pyplot(fig)
                                plt.close()
                        
                        with tab3:
                            st.subheader("–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º")
                            
                            for channel_name in channels_to_visualize:
                                results = detector.all_channel_results[channel_name]
                                
                                with st.expander(f"–ö–∞–Ω–∞–ª: {channel_name} ({results['intervals_count']} –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤)"):
                                    intervals_df = pd.DataFrame([
                                        {
                                            '–ù–∞—á–∞–ª–æ (—Å)': start,
                                            '–ö–æ–Ω–µ—Ü (—Å)': end, 
                                            '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Å)': duration
                                        }
                                        for start, end, duration in results['intervals']
                                    ])
                                    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨
                                    st.dataframe(intervals_df, width='stretch')
                    
                    else:
                        st.info("–†–∏—Ç–º–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö.")
                        
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}")
    
    else:
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        st.info("""
        ### –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:
        
        1. **–ó–∞–≥—Ä—É–∑–∏—Ç–µ EDF —Ñ–∞–π–ª** —Å –∑–∞–ø–∏—Å—å—é –≠–≠–ì —á–µ—Ä–µ–∑ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å
        2. **–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞**:
           - –ß–∞—Å—Ç–æ—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 15-30 –ì—Ü)
           - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–ø-–∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
           - –ü–æ—Ä–æ–≥ –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        3. **–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑"**
        
        ### –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã:
        - –ß–∞—Å—Ç–∞—è —Ä–∏—Ç–º–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –∑–∞–¥–∞–Ω–Ω–æ–º —á–∞—Å—Ç–æ—Ç–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
        - –û—Å—Ç—Ä—ã–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤–æ–ª–Ω—ã
        - –†–∏—Ç–º–∏—á–µ—Å–∫–∏–µ –≤—Å–ø–ª–µ—Å–∫–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é 0.1-2.0 —Å–µ–∫—É–Ω–¥—ã
        
        ### –í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
        - –¢–∞–±–ª–∏—Ü–∞ —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ –∫–∞–Ω–∞–ª–∞–º
        - –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
        - –°–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —á–∞—Å—Ç–æ—Ç–Ω–æ-–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        - –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º
        """)
        
        # –ü—Ä–∏–º–µ—Ä –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        st.header("üìã –ü—Ä–∏–º–µ—Ä –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("–°–∏–≥–Ω–∞–ª —Å –¥–µ—Ç–µ–∫—Ü–∏–µ–π")
            st.image("https://via.placeholder.com/600x300/4B7BEC/FFFFFF?text=–≠–≠–ì+—Å–∏–≥–Ω–∞–ª+—Å+–¥–µ—Ç–µ–∫—Ü–∏–µ–π", 
                    caption="–ü—Ä–∏–º–µ—Ä –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≠–≠–ì —Å–∏–≥–Ω–∞–ª–∞ —Å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
        
        with col2:
            st.subheader("–°–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º–∞")
            st.image("https://via.placeholder.com/600x300/32CD32/FFFFFF?text=–°–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º–∞+–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", 
                    caption="–ü—Ä–∏–º–µ—Ä —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º—ã —Å –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–π —Ä–∏—Ç–º–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é")

if __name__ == "__main__":
    main()
